from http.server import BaseHTTPRequestHandler, HTTPServer
import os, json, time, hashlib, pathlib, subprocess

PORT = int(os.getenv("SR_INGEST_PORT","8891"))
SR   = os.getenv("SR_DIR", os.path.expanduser("~/static-rooster"))
RCPT = os.path.join(SR, "receipts")
LOG  = os.path.join(SR, "logs", "sr-ingest-events.log")
pathlib.Path(RCPT).mkdir(parents=True, exist_ok=True)
pathlib.Path(os.path.dirname(LOG)).mkdir(parents=True, exist_ok=True)

def ts():
    return time.strftime("%Y%m%d_%H%M")

def write_receipt(payload: dict):
    kind = str(payload.get("kind","event")).lower()
    blob = json.dumps(payload, sort_keys=True).encode()
    h = hashlib.sha256(blob).hexdigest()[:10]
    name = f"sr_receipt_{kind}_{ts()}_{h}_v0_1.json"
    p = os.path.join(RCPT, name)
    with open(p,"w") as f: json.dump({
        "received_at": ts(),
        "kind": kind,
        "payload": payload
    }, f, indent=2)
    # try to refresh index
    try:
        subprocess.run([os.path.join(SR,"bin","sr_receipts_reindex.sh")], check=False)
    except Exception: pass
    return p, name

HTML = """<!doctype html><meta charset="utf-8">
<title>Reply Ingest · Static Rooster</title>
<style>
:root{color-scheme:dark}body{margin:0;background:#0f1a2b;color:#d7e2ff;font:16px/1.45 ui-sans-serif,system-ui,Segoe UI,Roboto}
.wrap{max-width:900px;margin:8vh auto;padding:24px}.card{background:#0b1322;border:1px solid #1e2a44;border-radius:14px;padding:18px}
.row{display:flex;gap:10px;flex-wrap:wrap}.pill{background:#0d233d;border:1px solid #22406a;border-radius:999px;padding:6px 10px}
a.btn{color:#d7e2ff;text-decoration:none;border:1px solid #2b4880;border-radius:10px;padding:8px 12px;background:#13284a}
</style>
<div class=wrap><div class=card>
  <h1 style="margin:0 0 6px">Reply Ingest</h1>
  <div class=row>
    <div class=pill>state <b>ok</b></div>
    <div class=pill>port <b>{PORT}</b></div>
    <a class=btn href=/health>/health</a>
    <a class=btn href=/receipts/index>/receipts/index</a>
  </div>
  <p>POST JSON to <code>/submit</code> → writes a receipt and refreshes the index.</p>
</div></div>"""

class H(BaseHTTPRequestHandler):
    def _json(self, obj, code=200):
        self.send_response(code)
        self.send_header("Content-Type","application/json"); self.end_headers()
        self.wfile.write(json.dumps(obj).encode())

    def do_GET(self):
        if self.path == "/health": return self._json({"ok": True, "port": PORT})
        if self.path == "/receipts/index":
            idx = os.path.join(SR, "receipts", "index_v0_1.json")
            if os.path.exists(idx):
                with open(idx) as f: data = json.load(f)
                return self._json(data)
            return self._json({"title":"Receipts Index","items":[]})
        if self.path == "/":
            self.send_response(200); self.send_header("Content-Type","text/html; charset=utf-8"); self.end_headers()
            self.wfile.write(HTML.encode()); return
        self.send_error(404)

    def do_POST(self):
        if self.path != "/submit": return self.send_error(404)
        try:
            n = int(self.headers.get("Content-Length","0"))
            raw = self.rfile.read(n) if n>0 else b"{}"
            try:
                payload = json.loads(raw.decode() or "{}")
            except Exception:
                return self._json({"ok": False, "error": "invalid JSON"}, 400)
            p, name = write_receipt(payload)
            with open(LOG,"a") as f: f.write(f"{ts()} {name}\n")
            return self._json({"ok": True, "receipt": f"/receipts/{name}"}, 201)
        except Exception as e:
            return self._json({"ok": False, "error": str(e)}, 500)

    def log_message(self,*a,**k): pass

if __name__=="__main__":
    HTTPServer(("127.0.0.1", PORT), H).serve_forever()
